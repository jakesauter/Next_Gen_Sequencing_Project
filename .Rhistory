filters="hgnc_symbol",
values=genes,
mart=mart,
uniqueRows=T)
ensembl_df %>%
head() %>%
kable()
ensembl_ids <- gsub(".[0-9]+$", "", rownames(log.norm.counts))
gene_names <-
ensembl_ids %>%
sapply(., function(ensembl_id) {
gene_name <- ensembl_df[ensembl_df$ensembl_gene_id == ensembl_id,
'hgnc_symbol'][1]
if (is.na(gene_name)) {
gene_name <- "NO_GENE_NAME_MAPPING"
}
return(gene_name)
})
rownames(rlog.norm.counts) <- gene_names
study_counts <-
rlog.norm.counts[rownames(rlog.norm.counts) %in% genes, ]
new_names <- rownames(corr_coeff) %>%
map(~accession_table[
accession_table['Run'] == .x,
'Diagnosis']) %>%
unlist()
new_names <-
paste0(new_names, '_',
str_extract(rownames(corr_coeff), '[0-9]{3}$'))
corr_coeff <-
study_counts %>%
cor(method = "pearson")
as.dist(1-corr_coeff, upper = TRUE) %>%
as.matrix() %>%
set_rownames(new_names) %>%
set_colnames(new_names) %>%
pheatmap::pheatmap(., main = "Pearson correlation")
plotPCA(DESeq.rlog)
ensembl_ids <- gsub(".[0-9]+$", "", rownames(DESeq.rlog))
gene_names <-
ensembl_ids %>%
sapply(., function(ensembl_id) {
gene_name <- ensembl_df[ensembl_df$ensembl_gene_id == ensembl_id,
'hgnc_symbol'][1]
if (is.na(gene_name)) {
gene_name <- "NO_GENE_NAME_MAPPING"
}
return(gene_name)
})
rownames(DESeq.rlog) <- gene_names
DESeq.rlog.subset <- subset(DESeq.rlog, rownames(DESeq.rlog) != "NO_GENE_NAME_MAPPING")
plotPCA(DESeq.rlog.subset)
study_counts
new_names <- colnames(study_counts) %>%
map(~accession_table[
accession_table['Run'] == .x,
'Diagnosis']) %>%
unlist()
new_names <-
paste0(new_names, '_',
str_extract(rownames(corr_coeff), '[0-9]{3}$'))
new_names
corr_coeff <-
study_counts %>%
cor(method = "pearson") %>%
set_rownames(new_names) %>%
set_colnames(new_names)
as.dist(1-corr_coeff, upper = TRUE) %>%
as.matrix() %>%
pheatmap::pheatmap(., main = "Pearson correlation")
plotPCA(DESeq.rlog)
ensembl_ids <- gsub(".[0-9]+$", "", rownames(DESeq.rlog))
gene_names <-
ensembl_ids %>%
sapply(., function(ensembl_id) {
gene_name <- ensembl_df[ensembl_df$ensembl_gene_id == ensembl_id,
'hgnc_symbol'][1]
if (is.na(gene_name)) {
gene_name <- "NO_GENE_NAME_MAPPING"
}
return(gene_name)
})
rownames(DESeq.rlog) <- gene_names
DESeq.rlog.subset <- subset(DESeq.rlog, rownames(DESeq.rlog) != "NO_GENE_NAME_MAPPING")
plotPCA(DESeq.rlog.subset)
study_counts
plotPCA(DESeq.rlog)
DESeq.rlog.subset
DESeq.rlog
ensembl_ids <- gsub(".[0-9]+$", "", rownames(DESeq.rlog))
ensembl_ids
DESeq.rlog <- rlog(DESeq.ds, blind = TRUE)
ensembl_ids <- gsub(".[0-9]+$", "", rownames(DESeq.rlog))
gene_names <-
ensembl_ids %>%
sapply(., function(ensembl_id) {
gene_name <- ensembl_df[ensembl_df$ensembl_gene_id == ensembl_id,
'hgnc_symbol'][1]
if (is.na(gene_name)) {
gene_name <- "NO_GENE_NAME_MAPPING"
}
return(gene_name)
})
gene_names
rownames(DESeq.rlog) <- gene_names
DESeq.rlog.subset <- subset(DESeq.rlog, rownames(DESeq.rlog) != "NO_GENE_NAME_MAPPING")
DESeq.rlog.subset
plotPCA(DESeq.rlog.subset)
DESeq.ds
DESeq.ds$condition
DESeq.ds$condition %>% table
DESeq.ds$sizeFactor
DESeq.ds$sizeFactor %>% plot
DESeq.ds$sizeFactor %>% plot(x=.)
DESeq.ds$sizeFactor %>% plot(y=.)
library(knitr)
library(purrr)
library(dplyr)
library(DESeq2)
library(ggplot2)
library(magrittr)
read_counts <- read.table(
'../featCounts/featCounts_genes.txt',
header = TRUE, stringsAsFactors = FALSE)
orig_names <- colnames(read_counts)
colnames(read_counts) <- gsub(".*(SRR[0-9]+).*", "\\1", orig_names)
row.names(read_counts) <- make.names(read_counts$Geneid)
read_counts <- read_counts[,-c(1:6)]
read_counts %>%
head() %>%
.[1:4] %>%
kable()
library(knitr)
library(purrr)
library(dplyr)
library(DESeq2)
library(ggplot2)
library(magrittr)
read_counts <- read.table(
'../featCounts/featCounts_genes.txt',
header = TRUE, stringsAsFactors = FALSE)
orig_names <- colnames(read_counts)
colnames(read_counts) <- gsub(".*(SRR[0-9]+).*", "\\1", orig_names)
row.names(read_counts) <- make.names(read_counts$Geneid)
read_counts <- read_counts[,-c(1:6)]
##FILTERING OUT QC FAILED SAMPLES
read_counts <- read_counts[,-c('SRR8440524', 'SRR8440463',
'SRR8440538', 'SRR8440539')]
read_counts
c('SRR8440524', 'SRR8440463',
'SRR8440538', 'SRR8440539')
read_counts[,-c('SRR8440524', 'SRR8440463',
'SRR8440538', 'SRR8440539')]
read_counts[,-c('SRR8440524', 'SRR8440463',
'SRR8440538', 'SRR8440539')]
read_counts[,-c('SRR8440524', 'SRR8440463',
'SRR8440538', 'SRR8440539')]
not
##FILTERING OUT QC FAILED SAMPLES
keep_samples <-
colnames(read_counts) %in%
c('SRR8440524', 'SRR8440463',
'SRR8440538', 'SRR8440539') %>%
not()
keep_samples
library(knitr)
library(purrr)
library(dplyr)
library(DESeq2)
library(ggplot2)
library(magrittr)
read_counts <- read.table(
'../featCounts/featCounts_genes.txt',
header = TRUE, stringsAsFactors = FALSE)
orig_names <- colnames(read_counts)
colnames(read_counts) <- gsub(".*(SRR[0-9]+).*", "\\1", orig_names)
row.names(read_counts) <- make.names(read_counts$Geneid)
read_counts <- read_counts[,-c(1:6)]
##FILTERING OUT QC FAILED SAMPLES
keep_samples <-
colnames(read_counts) %in%
c('SRR8440524', 'SRR8440463',
'SRR8440538', 'SRR8440539') %>%
not()
read_counts <-
read_counts[ , keep_samples]
read_counts %>%
head() %>%
.[1:4] %>%
kable()
accession_table <-
read.table('../accession_tables/Sra_run_table.txt',
header = TRUE, sep = ',', stringsAsFactors = FALSE) %>%
as.data.frame() %>%
filter(Cell_type == 'myeloid') %>%
dplyr::select(Run, Diagnosis, sex,
expired_age, Cell_type) %>%
arrange(Diagnosis)
accession_table %>%
kable()
conditions <-
colnames(read_counts) %>%
map(~accession_table[
accession_table['Run'] == .x,
'Diagnosis']) %>%
unlist()
sample_info <-
DataFrame(condition = conditions,
row.names = names(read_counts))
DESeq.ds <-
DESeqDataSetFromMatrix(
countData = as.matrix(read_counts),
colData = sample_info,
design = ~ condition)
DESeq.ds %>%
counts() %>%
head() %>%
.[,1:5] %>%
kable()
library(stringr)
colSums(counts(DESeq.ds)) %>%
data.frame(sample = str_extract(names(.), '[0-9]{3}$'), reads = .) %>%
ggplot() +
geom_col(aes(x = sample, y = reads)) +
theme(axis.text.x = element_text(angle=-35))
dim(DESeq.ds)
keep_genes <- rowSums(counts(DESeq.ds)) > 0
DESeq.ds <- DESeq.ds[keep_genes, ]
dim(DESeq.ds)
DESeq.ds <- estimateSizeFactors(DESeq.ds)
plot(sizeFactors(DESeq.ds), colSums(counts(DESeq.ds)),
ylab = 'library sizes', xlab = 'size factors', cex = 0.6)
par(mfrow = c(1,2))
boxplot(log2(counts(DESeq.ds)+1), notch=TRUE,main = "Non-normalized read counts",ylab="log2(read counts)", cex = .6)
## bp of size-factor normalized values
boxplot(log2(counts(DESeq.ds, normalize= TRUE)+1), notch=TRUE,main = "Size-factor-normalized read counts",ylab="log2(read counts)", cex = .6)
if (!exists('DESeq.rlog')) {
DESeq.rlog <- rlog(DESeq.ds, blind = TRUE)
}
par(mfrow = c(1,2))
log.norm.counts <-
DESeq.ds %>%
counts(normalized=TRUE) %>%
{.+1} %>%
log2()
plot(log.norm.counts[,c('SRR8440524', 'SRR8440525')], cex=.1,
main = "size factor and log2-transformed")
if (!exists('DESeq.rlog')) {
DESeq.rlog <- rlog(DESeq.ds, blind = TRUE)
}
DESeq.rlog <- rlog(DESeq.ds, blind = TRUE)
if (!exists('DESeq.rlog')) {
DESeq.rlog <- rlog(DESeq.ds, blind = TRUE)
}
par(mfrow = c(1,2))
log.norm.counts <-
DESeq.ds %>%
counts(normalized=TRUE) %>%
{.+1} %>%
log2()
plot(log.norm.counts[,c('SRR8440524', 'SRR8440525')], cex=.1,
main = "size factor and log2-transformed")
if (!exists('DESeq.rlog')) {
DESeq.rlog <- rlog(DESeq.ds, blind = TRUE)
}
par(mfrow = c(1,2))
log.norm.counts <-
DESeq.ds %>%
counts(normalized=TRUE) %>%
{.+1} %>%
log2()
plot(log.norm.counts[,c('SRR8440488', 'SRR8440501')], cex=.1,
main = "size factor and log2-transformed")
## the rlog-transformed counts are stored in the accessor "assay"
plot(assay(DESeq.rlog)[,'SRR8440524'],
assay(DESeq.rlog)[,'SRR8440525'],
main = "rlog transformed",
cex=.1,
xlab ='SRR8440524',
ylab ='SRR8440525')
plot(log.norm.counts[,c('SRR8440488', 'SRR8440501')], cex=.1,
main = "size factor and log2-transformed")
plot(log.norm.counts[,c('SRR8440488', 'SRR8440501')], cex=.1,
main = "size factor and log2-transformed")
## the rlog-transformed counts are stored in the accessor "assay"
plot(assay(DESeq.rlog)[,'SRR8440524'],
assay(DESeq.rlog)[,'SRR8440525'],
main = "rlog transformed",
cex=.1,
xlab ='SRR8440524',
ylab ='SRR8440525')
if (!exists('DESeq.rlog')) {
DESeq.rlog <- rlog(DESeq.ds, blind = TRUE)
}
par(mfrow = c(1,2))
log.norm.counts <-
DESeq.ds %>%
counts(normalized=TRUE) %>%
{.+1} %>%
log2()
plot(log.norm.counts[,c('SRR8440488', 'SRR8440501')], cex=.1,
main = "size factor and log2-transformed")
## the rlog-transformed counts are stored in the accessor "assay"
plot(assay(DESeq.rlog)[,'SRR8440488'],
assay(DESeq.rlog)[,'SRR8440501'],
main = "rlog transformed",
cex=.1,
xlab ='SRR8440524',
ylab ='SRR8440525')
if (!exists('DESeq.rlog')) {
DESeq.rlog <- rlog(DESeq.ds, blind = TRUE)
}
par(mfrow = c(1,2))
log.norm.counts <-
DESeq.ds %>%
counts(normalized=TRUE) %>%
{.+1} %>%
log2()
plot(log.norm.counts[,c('SRR8440518', 'SRR8440529')], cex=.1,
main = "size factor and log2-transformed")
## the rlog-transformed counts are stored in the accessor "assay"
plot(assay(DESeq.rlog)[,'SRR8440518'],
assay(DESeq.rlog)[,'SRR8440529'],
main = "rlog transformed",
cex=.1,
xlab ='SRR8440518',
ylab ='SRR8440529')
log.norm.counts <-
DESeq.ds %>%
counts(normalized=TRUE) %>%
log2()
## set up ploting frames
par(mfrow=c(1,1))
## generate the plot
msd_plot <-
vsn::meanSdPlot(log.norm.counts,
ranks=FALSE,
plot=FALSE)
msd_plot$gg +
ggtitle("Sequencing depth normalized log2(read counts)") +
ylab("standard deviation")
rlog.norm.counts <-
DESeq.rlog %>%
assay()
msd_plot <-
vsn::meanSdPlot(rlog.norm.counts,
ranks=FALSE,
plot = FALSE)
msd_plot$gg +
ggtitle("rlog transformation") +
coord_cartesian(ylim = c(0,3))
corr_coeff <- cor(rlog.norm.counts, method = "pearson")
new_names <- rownames(corr_coeff) %>%
map(~accession_table[
accession_table['Run'] == .x,
'sex']) %>%
unlist()
new_names <-
paste0(new_names, '_',
str_extract(rownames(corr_coeff), '[0-9]{3}$'))
rownames(corr_coeff) <- new_names
colnames(corr_coeff) <- new_names
as.dist(1-corr_coeff, upper = TRUE) %>%
as.matrix %>%
pheatmap::pheatmap(., main = "Pearson correlation")
corr_coeff <- cor(rlog.norm.counts, method = "pearson")
new_names <- rownames(corr_coeff) %>%
map(~accession_table[
accession_table['Run'] == .x,
'Diagnosis']) %>%
unlist()
new_names <-
paste0(new_names, '_',
str_extract(rownames(corr_coeff), '[0-9]{3}$'))
rownames(corr_coeff) <- new_names
colnames(corr_coeff) <- new_names
as.dist(1-corr_coeff, upper = TRUE) %>%
as.matrix %>%
pheatmap::pheatmap(., main = "Pearson correlation")
rlog_corr_coeff <-
rlog.norm.counts %>%
cor(method = "pearson") %>%
set_rownames(new_names) %>%
set_colnames(new_names)
as.dist(1-rlog_corr_coeff) %>%
hclust() %>%
plot(.,
main = "rlog transformed read counts")
library(biomaRt)
mart <- useMart("ensembl", dataset="hsapiens_gene_ensembl")
genes <-
c('PLCG2', 'ABI3', 'INPP5D', 'RIN3', 'CASS4',
'GPR141', 'CR1', 'PICALM', 'CD2AP', 'IL1RAP',
'MEF2C', 'ABCA7', 'ZYX', 'PTK2B', 'BIN1', 'PILRA',
'SORL1' ,'SF4A6A', 'TREM2', 'CD33', 'HLA-DRB1',
'SPI1', 'APOE', 'FERMT2', 'CLU')
attributes <- c('ensembl_gene_id','ensembl_transcript_id','hgnc_symbol')
ensembl_df <-
getBM(attributes=attributes,
filters="hgnc_symbol",
values=genes,
mart=mart,
uniqueRows=T)
ensembl_df %>%
head() %>%
kable()
ensembl_ids <- gsub(".[0-9]+$", "", rownames(log.norm.counts))
gene_names <-
ensembl_ids %>%
sapply(., function(ensembl_id) {
gene_name <- ensembl_df[ensembl_df$ensembl_gene_id == ensembl_id,
'hgnc_symbol'][1]
if (is.na(gene_name)) {
gene_name <- "NO_GENE_NAME_MAPPING"
}
return(gene_name)
})
rownames(rlog.norm.counts) <- gene_names
study_counts <-
rlog.norm.counts[rownames(rlog.norm.counts) %in% genes, ]
new_names <- colnames(study_counts) %>%
map(~accession_table[
accession_table['Run'] == .x,
'Diagnosis']) %>%
unlist()
new_names <-
paste0(new_names, '_',
str_extract(rownames(corr_coeff), '[0-9]{3}$'))
corr_coeff <-
study_counts %>%
cor(method = "pearson") %>%
set_rownames(new_names) %>%
set_colnames(new_names)
as.dist(1-corr_coeff, upper = TRUE) %>%
as.matrix() %>%
pheatmap::pheatmap(., main = "Pearson correlation")
ensembl_ids <- gsub(".[0-9]+$", "", rownames(log.norm.counts))
gene_names <-
ensembl_ids %>%
sapply(., function(ensembl_id) {
gene_name <- ensembl_df[ensembl_df$ensembl_gene_id == ensembl_id,
'hgnc_symbol'][1]
if (is.na(gene_name)) {
gene_name <- "NO_GENE_NAME_MAPPING"
}
return(gene_name)
})
rownames(rlog.norm.counts) <- gene_names
study_counts <-
rlog.norm.counts[rownames(rlog.norm.counts) %in% genes, ]
new_names <- colnames(study_counts) %>%
map(~accession_table[
accession_table['Run'] == .x,
'Diagnosis']) %>%
unlist()
new_names <-
paste0(new_names, '_',
str_extract(rownames(corr_coeff), '[0-9]{3}$'))
corr_coeff <-
study_counts %>%
cor(method = "pearson") %>%
set_rownames(new_names) %>%
set_colnames(new_names)
as.dist(corr_coeff, upper = TRUE) %>%
as.matrix() %>%
pheatmap::pheatmap(., main = "Pearson correlation")
ensembl_ids <- gsub(".[0-9]+$", "", rownames(log.norm.counts))
gene_names <-
ensembl_ids %>%
sapply(., function(ensembl_id) {
gene_name <- ensembl_df[ensembl_df$ensembl_gene_id == ensembl_id,
'hgnc_symbol'][1]
if (is.na(gene_name)) {
gene_name <- "NO_GENE_NAME_MAPPING"
}
return(gene_name)
})
rownames(rlog.norm.counts) <- gene_names
study_counts <-
rlog.norm.counts[rownames(rlog.norm.counts) %in% genes, ]
new_names <- colnames(study_counts) %>%
map(~accession_table[
accession_table['Run'] == .x,
'Diagnosis']) %>%
unlist()
new_names <-
paste0(new_names, '_',
str_extract(rownames(corr_coeff), '[0-9]{3}$'))
corr_coeff <-
study_counts %>%
cor(method = "pearson") %>%
set_rownames(new_names) %>%
set_colnames(new_names)
as.dist(1-corr_coeff, upper = TRUE) %>%
as.matrix() %>%
pheatmap::pheatmap(., main = "Pearson correlation")
plotPCA(DESeq.rlog)
ensembl_ids <- gsub(".[0-9]+$", "", rownames(DESeq.rlog))
gene_names <-
ensembl_ids %>%
sapply(., function(ensembl_id) {
gene_name <- ensembl_df[ensembl_df$ensembl_gene_id == ensembl_id,
'hgnc_symbol'][1]
if (is.na(gene_name)) {
gene_name <- "NO_GENE_NAME_MAPPING"
}
return(gene_name)
})
rownames(DESeq.rlog) <- gene_names
DESeq.rlog.subset <- subset(DESeq.rlog, rownames(DESeq.rlog) != "NO_GENE_NAME_MAPPING")
plotPCA(DESeq.rlog.subset)
0.5**10
